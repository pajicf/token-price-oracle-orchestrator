/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  TickerPriceStorageAbi,
  TickerPriceStorageAbiInterface,
} from "../abi/TickerPriceStorageAbi";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tickerFeedRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "ticker",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "TickerPriceUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "ticker",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class TickerPriceStorageAbi__factory {
  static readonly abi = _abi;
  static createInterface(): TickerPriceStorageAbiInterface {
    return new Interface(_abi) as TickerPriceStorageAbiInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TickerPriceStorageAbi {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TickerPriceStorageAbi;
  }
}
